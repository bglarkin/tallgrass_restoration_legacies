amf_df %>%
filter(field_type == "restored", region == "BM", family %in% all7)
for (i in 1:length(all7)) {
print(all7[i])
print(summary(lm(
seq_sum ~ yr_since, data = mod_data %>% filter(family == all7[i])
)))
}
return(amf_df)
}
#'
#' ## Examine change over time in guilds
#' Function `guiltime()` filters ITS data to a user-specified guild and
#' produces linear models and plots of change in sequence abundance over time since restoration
#' in Blue Mounds and Fermilab.
guiltime <- function(pl) {
d <- spe_meta$its_rfy %>%
filter(
primary_lifestyle == pl,
region %in% c("BM", "FL"),
field_type == "restored"
) %>%
group_by(field_key, field_name, region, yr_since) %>%
summarize(seq_sum = sum(seq_abund), .groups = "drop")
bm <- summary(
lm(seq_sum ~ yr_since, data = d %>% filter(region == "BM"))
)
fl <- summary(
lm(seq_sum ~ yr_since, data = d %>% filter(region == "FL"))
)
fits <- data.frame(
rbind(BM = c(coef(bm)[1,1], coef(bm)[2,1], coef(bm)[2,4]),
FL = c(coef(fl)[1,1], coef(fl)[2,1], coef(fl)[2,4]))) %>%
mutate(lty = case_when(X3 < 0.05 ~ "a", TRUE ~ NA_character_)) %>%
rownames_to_column(var = "region")
plot <-
ggplot(d, aes(x = yr_since, y = seq_sum)) +
facet_wrap(vars(region), scales = "free_y") +
geom_point() +
geom_abline(data = fits, aes(slope = X2, intercept = X1, linetype = lty), color = "blue") +
labs(x = "Years since restoration",
y = "Sum of ITS sequences",
caption = "Solid line, if present, shows linear relationship at p<0.05") +
theme_bw() +
theme(legend.position = "none")
out <- list(
bm_summary = bm,
fl_summary = fl,
plot = plot
)
print(out)
}
#'
#' ## Re-rarefy in guilds (or groups)
#' To examine richness and composition within subgroups of OTUs, the raw sequence
#' data should be re-rarefied within those groups. Otherwise, especially with low-abundance
#' groups, data and sites may have been lost when the entire species matrix was
#' rarefied. This function automates the process.
#'
#' Outputs are:
#'
#' 1. Sequencing depth used for the subset of OTUs
#' 1. Number of OTUs excluded by rarefying
#' 1. The re-rarefied samples-species matrix
#' 1. The OTU list in long form, with abundances, species, and site metadata
#'
#+ rerare_function
rerare <- function(spe, meta, grp_var, grp, site) {
# spe       = species matrix with raw abundances
# meta      = species metadata matching the OTU list with raw abundances
# grp_var   = variable name from `meta` desired for grouping and filtering
#             the OTUs (e.g., `primary_lifestyle`, `family`)
# grp       = string or factor level name of the group desired from `grp_var`
# site      = site metadata to combine with sequence abundance long-form
#             output table
grp_var <- enquo(grp_var)
data <-
spe %>%
column_to_rownames(var = "field_key") %>%
t() %>%
as.data.frame() %>%
rownames_to_column(var = "otu_num") %>%
as_tibble() %>%
left_join(meta, by = join_by(otu_num)) %>%
filter(!!grp_var == grp) %>%
column_to_rownames(var = "otu_num") %>%
select(-colnames(meta)[-1]) %>%
t() %>%
as.data.frame()
depth <- min(rowSums(data))
rfy <- Rarefy(data)
zero_otu <- which(apply(rfy$otu.tab.rff, 2, sum) == 0)
rrfd <- data.frame(rfy$otu.tab.rff[, -zero_otu]) %>%
rownames_to_column(var = "field_key") %>%
mutate(field_key = as.numeric(field_key)) %>%
arrange(field_key) %>%
as_tibble()
rrfd_speTaxa <-
rrfd %>%
pivot_longer(cols = starts_with("otu"),
names_to = "otu_num",
values_to = "seq_abund") %>%
filter(seq_abund > 0) %>%
left_join(meta, by = join_by(otu_num)) %>%
left_join(site, by = join_by(field_key)) %>%
select(-otu_ID)
return(list(
seq_depth = depth,
zero_otu_num = length(zero_otu),
rrfd = rrfd,
rrfd_speTaxa = rrfd_speTaxa
))
}
#'
#' ### Calculate Hill's series on a samples-species matrix
#' The object `$rrfd` from rerare() can be passed to this function
#+ calc_diversity_function
calc_diversity <- function(spe) {
spe_mat <- data.frame(spe, row.names = 1)
N0  <- apply(spe_mat > 0, MARGIN = 1, FUN = sum)
N1  <- exp(diversity(spe_mat))
N2  <- diversity(spe_mat, "inv")
E10 <- N1 / N0
E20 <- N2 / N0
return(
data.frame(N0, N1, N2, E10, E20) %>%
rownames_to_column(var = "field_key") %>%
mutate(field_key = as.integer(field_key)) %>%
left_join(sites, by = join_by(field_key)) %>%
pivot_longer(
cols = N0:E20,
names_to = "hill_index",
values_to = "value"
) %>%
mutate(hill_index = factor(
hill_index,
ordered = TRUE,
levels = c("N0", "N1", "N2", "E10", "E20")
))
)
}
#'
#' ### Results from re-rarefied data
#' After re-rarefying into a guild (or taxonomic group), produce diversity statistics
#' and calculate percent composition; display results. For plotting, it's convenient
#' to limit the number of taxonomic orders displayed. Use the argument `other_threshold` to
#' choose a small (e.g., 2, the default) cutoff, below which orders are relabeled as "other".
gudicom <- function(div, rrfd, grp_var, other_threshold=2) {
hillfield <-
ggplot(div, aes(x = field_type, y = value)) +
facet_wrap(vars(hill_index), scales = "free_y") +
geom_boxplot(varwidth = TRUE, fill = "gray90", outlier.shape = NA) +
geom_beeswarm(aes(fill = region), shape = 21, size = 2, dodge.width = 0.2) +
labs(x = "", y = "Index value", title = paste("Microbial diversity (Hill's):", grp_var),
caption = "Re-rarefied in the group; N0-richness, N1-e^Shannon, N2-Simpson, E10=N1/N0, E20=N2/N0, width=n") +
scale_fill_discrete_qualitative(palette = "Dark3") +
theme_bw()
hilltime <-
div %>%
filter(field_type == "restored", region %in% c("BM", "FL")) %>%
ggplot(aes(x = yr_since, y = value)) +
facet_grid(rows = vars(hill_index), cols = vars(region), scales = "free") +
geom_smooth(method = "lm") +
geom_point() +
labs(x = "Years since restoration", y = "Index value", title = paste("Microbial diversity (Hill's) in restored fields:", grp_var),
caption = "Re-rarefied in the group; N0-richness, N1-e^Shannon, N2-Simpson, E10=N1/N0, E20=N2/N0, width=n") +
theme_bw()
comp <-
rrfd %>%
filter(order != is.na(order), order != "unidentified") %>%
group_by(field_type, order, field_key) %>%
summarize(seq_sum = sum(seq_abund), .groups = "drop_last") %>%
summarize(seq_avg = mean(seq_sum), .groups = "drop_last") %>%
mutate(seq_comp = (seq_avg / sum(seq_avg)) * 100,
order = replace(order, which(seq_comp < other_threshold), paste0("Other (OTU<", other_threshold, "%)"))) %>%
group_by(field_type, order) %>%
summarize(seq_comp = sum(seq_comp), .groups = "drop")
comp_plot <-
ggplot(comp, aes(x = field_type, y = seq_comp)) +
geom_col(aes(fill = order), color = "black") +
labs(x = "", y = "Proportion of sequence abundance",
title = paste("Composition of", grp_var)) +
scale_fill_discrete_sequential(name = "Order", palette = "Plasma") +
theme_classic()
print(list(
Hills_field_type = hillfield,
Hills_yrs_since_restoration = hilltime,
Composition = comp_plot
))
return(comp)
}
#'
#' ## Perform Indicator Species Analysis
#' Function `inspan()` takes a combined species and sites data frame and
#' wrangles it through the analysis to filter OTUs for indicators of field types.
#' The output is top candidate OTUs joined with species metadata for further analysis.
#+ inspan_function
inspan <- function(data, np, meta) {
# data is the samples-species matrix joined with the sites data frame
# the join aligns the grouping vector with field numbers
# np is the desired number of permutations
# meta is the appropriate species metadata table for the original data
spe <- data.frame(
data %>% select(field_key, starts_with("otu")),
row.names = 1
)
grp = data$field_type
mp <- multipatt(
spe,
grp,
max.order = 1,
control = how(nperm = np))
si <- mp$sign %>%
select(index, stat, p.value) %>%
mutate(field_type = case_when(index == 1 ~ "corn",
index == 2 ~ "restored",
index == 3 ~ "remnant")) %>%
filter(p.value < 0.05) %>%
rownames_to_column(var = "otu_num") %>%
select(-index) %>%
as_tibble()
A  <- mp$A %>%
as.data.frame() %>%
rownames_to_column(var = "otu_num") %>%
pivot_longer(cols = corn:remnant,
names_to = "field_type",
values_to = "A")
B <- mp$B %>%
as.data.frame() %>%
rownames_to_column(var = "otu_num") %>%
pivot_longer(cols = corn:remnant,
names_to = "field_type",
values_to = "B")
out <-
si %>%
left_join(A, by = join_by(otu_num, field_type)) %>%
left_join(B, by = join_by(otu_num, field_type)) %>%
left_join(meta %>% select(-otu_ID), by = join_by(otu_num)) %>%
select(otu_num, A, B, stat, p.value,
field_type, primary_lifestyle, everything()) %>%
arrange(field_type, -stat)
return(out)
}
#'
#' # Analysis and Results
#' ## ITS sequences
#' Function outputs are verbose, but details may be necessary later so they are displayed here.
#+ its_tax_trophic_otu,message=FALSE,fig.height=7,fig.align='center'
its_taxaGuild(spe_meta$its_rfy)
#'
#' # Functions
#' Functions streamline data processing, model fitting, and results output.
#' ### Function: ITS taxonomy
#' This function simplifies and displays the sequence distribution among taxa and
#' across primary lifestyles. Use the argument `other_threshold` to
#' choose a small (e.g., 2, the default) cutoff, below which orders are relabeled as "other".
#+ its_tax_trophic
its_taxaGuild <- function(data, other_threshold=2) {
# What is the distribution among site types at the class level?
taxonomy_df <-
data %>%
group_by(phylum, order, field_type, field_name) %>%
summarize(abund = sum(seq_abund), .groups = "drop") %>%
group_by(phylum, order, field_type) %>%
summarize(mean = mean(abund) %>% round(., 2),
.groups = "drop") %>%
pivot_wider(
names_from = field_type,
values_from = mean,
values_fill = 0
) %>%
select(phylum, order, corn, restored, remnant) %>%
arrange(-remnant)
print(kable(
taxonomy_df,
format = "pandoc",
caption = "Distribution of ITS OTUs in classes; mean sequence abundance by field type"
))
# What is the distribution of `primary_lifestyles` among site types?
guild_df <-
data %>%
group_by(primary_lifestyle, field_type, field_name) %>%
summarize(abund = sum(seq_abund), .groups = "drop") %>%
group_by(primary_lifestyle, field_type) %>%
summarize(mean = round(mean(abund), 1), .groups = "drop") %>%
pivot_wider(
names_from = field_type,
values_from = mean,
values_fill = 0
) %>%
select(primary_lifestyle, corn, restored, remnant) %>%
arrange(-remnant)
# Create table
table <- kable(guild_df, format = "pandoc",
caption = "Distribution of ITS OTUs by Fungal Trait 'primary_lifestyle'; mean sequence abundance by field type")
# Plot the most abundant orders across field types
plot_orders <-
data %>%
filter(order != is.na(order), order != "unidentified") %>%
group_by(field_type, order, field_key) %>%
summarize(seq_sum = sum(seq_abund), .groups = "drop_last") %>%
summarize(seq_avg = mean(seq_sum), .groups = "drop_last") %>%
mutate(seq_comp = (seq_avg / sum(seq_avg)) * 100,
order = replace(order, which(seq_comp < 2), paste0("Other (OTU<", other_threshold, "%)"))) %>%
group_by(field_type, order) %>%
summarize(seq_comp = sum(seq_comp), .groups = "drop") %>%
ggplot(., aes(x = field_type, y = seq_comp)) +
geom_col(aes(fill = order), color = "black") +
labs(x = "", y = "Proportion of sequence abundance",
title = "Composition of fungi by order") +
scale_fill_discrete_sequential(name = "Order", palette = "Plasma") +
theme_classic()
# Plot the composition of primary lifestyles
plot_guilds <-
data %>%
group_by(field_type, primary_lifestyle, field_key) %>%
summarize(seq_sum = sum(seq_abund), .groups = "drop_last") %>%
summarize(seq_avg = mean(seq_sum), .groups = "drop_last") %>%
mutate(seq_comp = (seq_avg / sum(seq_avg)) * 100,
primary_lifestyle = replace(primary_lifestyle, which(seq_comp < 2), paste0("Other (OTU<", other_threshold, "%)"))) %>%
group_by(field_type, primary_lifestyle) %>%
summarize(seq_comp = sum(seq_comp), .groups = "drop") %>%
ggplot(., aes(x = field_type, y = seq_comp)) +
geom_col(aes(fill = primary_lifestyle), color = "black") +
labs(x = "", y = "Proportion of sequence abundance",
title = "Composition of fungi by primary lifestyle") +
scale_fill_discrete_sequential(name = "Primary\nlifestyle", palette = "Inferno") +
theme_classic()
print(list(table,
plot_orders,
plot_guilds))
}
#'
#' # Analysis and Results
#' ## ITS sequences
#' Function outputs are verbose, but details may be necessary later so they are displayed here.
#+ its_tax_trophic_otu,message=FALSE,fig.height=7,fig.align='center'
its_taxaGuild(spe_meta$its_rfy)
#'
#' # Functions
#' Functions streamline data processing, model fitting, and results output.
#' ### Function: ITS taxonomy
#' This function simplifies and displays the sequence distribution among taxa and
#' across primary lifestyles. Use the argument `other_threshold` to
#' choose a small (e.g., 2, the default) cutoff, below which orders are relabeled as "other".
#+ its_tax_trophic
its_taxaGuild <- function(data, other_threshold=2) {
# What is the distribution among site types at the class level?
taxonomy_df <-
data %>%
group_by(phylum, order, field_type, field_name) %>%
summarize(abund = sum(seq_abund), .groups = "drop") %>%
group_by(phylum, order, field_type) %>%
summarize(mean = mean(abund) %>% round(., 2),
.groups = "drop") %>%
pivot_wider(
names_from = field_type,
values_from = mean,
values_fill = 0
) %>%
select(phylum, order, corn, restored, remnant) %>%
arrange(-remnant)
print(kable(
taxonomy_df,
format = "pandoc",
caption = "Distribution of ITS OTUs in classes; mean sequence abundance by field type"
))
# What is the distribution of `primary_lifestyles` among site types?
guild_df <-
data %>%
group_by(primary_lifestyle, field_type, field_name) %>%
summarize(abund = sum(seq_abund), .groups = "drop") %>%
group_by(primary_lifestyle, field_type) %>%
summarize(mean = round(mean(abund), 1), .groups = "drop") %>%
pivot_wider(
names_from = field_type,
values_from = mean,
values_fill = 0
) %>%
select(primary_lifestyle, corn, restored, remnant) %>%
arrange(-remnant)
# Create table
table <- kable(guild_df, format = "pandoc",
caption = "Distribution of ITS OTUs by Fungal Trait 'primary_lifestyle'; mean sequence abundance by field type")
# Plot the most abundant orders across field types
plot_orders <-
data %>%
filter(order != is.na(order), order != "unidentified") %>%
group_by(field_type, order, field_key) %>%
summarize(seq_sum = sum(seq_abund), .groups = "drop_last") %>%
summarize(seq_avg = mean(seq_sum), .groups = "drop_last") %>%
mutate(seq_comp = (seq_avg / sum(seq_avg)) * 100,
order = replace(order, which(seq_comp < 2), paste0("Other (OTU<", other_threshold, "%)"))) %>%
group_by(field_type, order) %>%
summarize(seq_comp = sum(seq_comp), .groups = "drop") %>%
ggplot(., aes(x = field_type, y = seq_comp)) +
geom_col(aes(fill = order), color = "black") +
labs(x = "", y = "Proportion of sequence abundance",
title = "Composition of fungi by order") +
scale_fill_discrete_sequential(name = "Order", palette = "Plasma") +
theme_classic()
# Plot the composition of primary lifestyles
plot_guilds <-
data %>%
filter(primary_lifestyle != is.na(primary_lifestyle)) %>%
group_by(field_type, primary_lifestyle, field_key) %>%
summarize(seq_sum = sum(seq_abund), .groups = "drop_last") %>%
summarize(seq_avg = mean(seq_sum), .groups = "drop_last") %>%
mutate(seq_comp = (seq_avg / sum(seq_avg)) * 100,
primary_lifestyle = replace(primary_lifestyle, which(seq_comp < 2), paste0("Other (OTU<", other_threshold, "%)"))) %>%
group_by(field_type, primary_lifestyle) %>%
summarize(seq_comp = sum(seq_comp), .groups = "drop") %>%
ggplot(., aes(x = field_type, y = seq_comp)) +
geom_col(aes(fill = primary_lifestyle), color = "black") +
labs(x = "", y = "Proportion of sequence abundance",
title = "Composition of fungi by primary lifestyle") +
scale_fill_discrete_sequential(name = "Primary\nlifestyle", palette = "Inferno") +
theme_classic()
print(list(table,
plot_orders,
plot_guilds))
}
#'
#' # Analysis and Results
#' ## ITS sequences
#' Function outputs are verbose, but details may be necessary later so they are displayed here.
#+ its_tax_trophic_otu,message=FALSE,fig.height=7,fig.align='center'
its_taxaGuild(spe_meta$its_rfy)
#'
#' # Functions
#' Functions streamline data processing, model fitting, and results output.
#' ### Function: ITS taxonomy
#' This function simplifies and displays the sequence distribution among taxa and
#' across primary lifestyles. Use the argument `other_threshold` to
#' choose a small (e.g., 2, the default) cutoff, below which orders are relabeled as "other".
#+ its_tax_trophic
its_taxaGuild <- function(data, other_threshold=2) {
# What is the distribution among site types at the class level?
taxonomy_df <-
data %>%
group_by(phylum, order, field_type, field_name) %>%
summarize(abund = sum(seq_abund), .groups = "drop") %>%
group_by(phylum, order, field_type) %>%
summarize(mean = mean(abund) %>% round(., 2),
.groups = "drop") %>%
pivot_wider(
names_from = field_type,
values_from = mean,
values_fill = 0
) %>%
select(phylum, order, corn, restored, remnant) %>%
arrange(-remnant)
print(kable(
taxonomy_df,
format = "pandoc",
caption = "Distribution of ITS OTUs in classes; mean sequence abundance by field type"
))
# What is the distribution of `primary_lifestyles` among site types?
guild_df <-
data %>%
group_by(primary_lifestyle, field_type, field_name) %>%
summarize(abund = sum(seq_abund), .groups = "drop") %>%
group_by(primary_lifestyle, field_type) %>%
summarize(mean = round(mean(abund), 1), .groups = "drop") %>%
pivot_wider(
names_from = field_type,
values_from = mean,
values_fill = 0
) %>%
select(primary_lifestyle, corn, restored, remnant) %>%
arrange(-remnant)
# Create table
table <- kable(guild_df, format = "pandoc",
caption = "Distribution of ITS OTUs by Fungal Trait 'primary_lifestyle'; mean sequence abundance by field type")
# Plot the most abundant orders across field types
plot_orders <-
data %>%
filter(order != is.na(order), order != "unidentified") %>%
group_by(field_type, order, field_key) %>%
summarize(seq_sum = sum(seq_abund), .groups = "drop_last") %>%
summarize(seq_avg = mean(seq_sum), .groups = "drop_last") %>%
mutate(seq_comp = (seq_avg / sum(seq_avg)) * 100,
order = replace(order, which(seq_comp < 2), paste0("Other (OTU<", other_threshold, "%)"))) %>%
group_by(field_type, order) %>%
summarize(seq_comp = sum(seq_comp), .groups = "drop") %>%
ggplot(., aes(x = field_type, y = seq_comp)) +
geom_col(aes(fill = order), color = "black") +
labs(x = "", y = "Proportion of sequence abundance",
title = "Composition of fungi by order") +
scale_fill_discrete_sequential(name = "Order", palette = "Plasma") +
theme_classic()
# Plot the composition of primary lifestyles
plot_guilds <-
data %>%
filter(primary_lifestyle != is.na(primary_lifestyle)) %>%
group_by(field_type, primary_lifestyle, field_key) %>%
summarize(seq_sum = sum(seq_abund), .groups = "drop_last") %>%
summarize(seq_avg = mean(seq_sum), .groups = "drop_last") %>%
mutate(seq_comp = (seq_avg / sum(seq_avg)) * 100,
primary_lifestyle = replace(primary_lifestyle, which(seq_comp < 2), paste0("Other (OTU<", other_threshold, "%)"))) %>%
group_by(field_type, primary_lifestyle) %>%
summarize(seq_comp = sum(seq_comp), .groups = "drop") %>%
ggplot(., aes(x = field_type, y = seq_comp)) +
geom_col(aes(fill = primary_lifestyle), color = "black") +
labs(x = "", y = "Proportion of sequence abundance",
title = "Composition of fungi by primary lifestyle") +
scale_fill_discrete_sequential(name = "Primary lifestyle", palette = "Inferno") +
theme_classic()
print(list(table,
plot_orders,
plot_guilds))
}
